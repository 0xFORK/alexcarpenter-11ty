<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Carpenter</title>
    <description></description>
    <link>http://alexcarpenter.me/</link>
    <atom:link href="http://alexcarpenter.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Jan 2017 18:32:46 -0500</pubDate>
    <lastBuildDate>Thu, 26 Jan 2017 18:32:46 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Favorite Podcasts</title>
        <description>&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spec.fm/podcasts/design-details&quot;&gt;Design Details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.designernews.co/podcast&quot;&gt;DN FM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://layout.fm/&quot;&gt;Layout.fm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;development&quot;&gt;Development&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://changelog.com&quot;&gt;The Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.codepen.io/radio/&quot;&gt;CodePen Radio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spec.fm/podcasts/does-not-compute&quot;&gt;Does Not Compute&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spec.fm/podcasts/immutable&quot;&gt;Immutable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://changelog.com/rfc&quot;&gt;Request For Commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://shoptalkshow.com&quot;&gt;ShopTalk Show&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lifestyle&quot;&gt;Lifestyle&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://99percentinvisible.org/&quot;&gt;99% Invisible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibrewmyowncoffee.com/&quot;&gt;I Brew My Own Coffee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fourhourworkweek.com/podcast/&quot;&gt;The Tim Ferriss Show&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 -0500</pubDate>
        <link>http://alexcarpenter.me/2016/11/28/favorite-podcasts.html</link>
        <guid isPermaLink="true">http://alexcarpenter.me/2016/11/28/favorite-podcasts.html</guid>
        
        
      </item>
    
      <item>
        <title>Trunkd.js - a9f1f17</title>
        <description>&lt;p&gt;It has been a little bit over a year since I started working at Mighty. I have learned a lot this past year, be it front-end or back-end development. One thing I know I need to focus more attention to is Javascript. It has never really clicked with me, so it has been easy to rely on jQuery plugins to do the work for me.&lt;/p&gt;

&lt;p&gt;Moving forward into my second year, I really wanted to sit down and focus on learning vanilla Javascript and understand the basic concepts. Everyone says to just build something. So I decided to do just that. I saw a &lt;a href=&quot;http://codepen.io/mariemosley/pen/rryaQA&quot;&gt;CodePen&lt;/a&gt; a while back from &lt;a href=&quot;mariemosley&quot;&gt;mariemosley&lt;/a&gt; that really interested me and I decided to pick it apart and build it into a small library which I am calling &lt;a href=&quot;https://github.com/alexcarpenter/trunkd.js&quot;&gt;Trunkd.js&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;To get started I did some reading a decided to make it into an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 Class&lt;/a&gt; which is just &lt;em&gt;syntactical sugar over JavaScript’s existing prototype-based inheritance&lt;/em&gt;. Below is a gist of the &lt;em&gt;messy&lt;/em&gt; start to my initial commit. Like I mentioned above, a lot of this stuff is really new to me so I am going to use this blog to explain my findings and try and make sense of what I am trying to accomplish.&lt;/p&gt;

&lt;!-- &lt;noscript&gt;&lt;pre&gt;class Trunkd {
  constructor(container, options = {}) {
    this.container = container || &amp;#39;.trunkd&amp;#39;;
    this.options = {
      antecedent: options.antecedent || &amp;#39;Recommended by:&amp;#39;,
      consequent: options.consequent || &amp;#39;others&amp;#39;,
      seperator: options.seperator || &amp;#39;,&amp;#39;
    }

    const sum = arr =&amp;gt; arr.reduce((a, b) =&amp;gt; a + b);
    const containerSelector = document.querySelector(this.container);
    const itemSelector = containerSelector.children;

    let availableWidth = containerSelector.clientWidth;
    let totalItems = itemSelector.length;
    let itemsWidths = this.makeArray(itemSelector);
    let itemsWidth = sum(itemsWidths);

    if (itemsWidth &amp;gt;= availableWidth) {
      let totalElement = containerSelector.appendChild(document.createElement(&amp;#39;li&amp;#39;));
      totalElement.textContent = `and ${totalItems} ${this.options.consequent}`;
    }
    
    console.log(this);
    console.log(availableWidth);
    console.log(itemsWidth);
  }

  // sum(arr) {
  //   arr =&amp;gt; arr.reduce((a, b) =&amp;gt; a + b);
  // }

  makeArray(obj) {
    let itemsArr = [];

    for (var i=0; i &amp;lt; obj.length; i++) {
      itemsArr.push(obj[i].clientWidth);
    }

    return itemsArr;
  }
}

// export default Trunkd;

const trunkd = new Trunkd();




// window.addEventListener(&amp;#39;resize&amp;#39;, function(event) {})

// console.log(container.children.length)


// const container = document.querySelector(&amp;#39;.recommendr&amp;#39;)
// const rcmdr = new Recommendr(container, {
//   // options...
//   itemSelector: &amp;#39;li&amp;#39;
// });





// const sum = arr =&amp;gt; arr.reduce((a, b) =&amp;gt; a + b);

// let containerSelector = document.querySelector(&amp;#39;.recommendr&amp;#39;);
// let itemSelector = containerSelector.children;
// let totalItems = itemSelector.length - 1;

// let itemsArr = [];

// for (var i = itemSelector.length - 1; i &amp;gt;= 0; i--) {
//   itemsArr.push(itemSelector[i].clientWidth);
// }

// let availableWidth = containerSelector.clientWidth;
// let itemsWidth = sum(itemsArr);

// if (itemsWidth &amp;gt;= availableWidth) {
//   let totalElement = containerSelector.appendChild(document.createElement(&amp;#39;li&amp;#39;));
//   totalElement.textContent = `and ${totalItems} others`;
// }

// console.log(availableWidth);
// console.log(itemsWidth);






// totalElement.textContent = `and ${totalItems} others`;

// for (var i = itemSelector.length - 1; i &amp;gt;= 0; i--) {
//   console.log(itemSelector[i].clientWidth);
// }

// for (var i = yearStart; i &amp;lt; yearEnd+1; i++) {
//     arr.push(i);
// }

// window.addEventListener(&amp;#39;resize&amp;#39;, function(event) {
//   console.log(containerSelector.clientWidth);
// });&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/alexcarpenter/f0fc3af7625b2d0fa8345b445e80de55.js&quot;&gt; &lt;/script&gt; --&gt;

&lt;h3 id=&quot;available-width&quot;&gt;Available Width&lt;/h3&gt;

&lt;p&gt;The available width will be calculated from the containing elements width. This should be a block level element filling the available space of its parent. It is recommended to make use of an unordered list for the document structure. To get the available width we use &lt;code class=&quot;highlighter-rouge&quot;&gt;.clientWidth&lt;/code&gt; on the container selector.&lt;/p&gt;

&lt;h3 id=&quot;items-width&quot;&gt;Items width&lt;/h3&gt;

&lt;p&gt;The items width is the total width of each &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; nested within the container. To get this width, we need to first gather all of the containers children &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;'s&lt;/code&gt;. To do this we create a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;itemSelector&lt;/code&gt; which equals &lt;code class=&quot;highlighter-rouge&quot;&gt;containerSelector.children&lt;/code&gt;. This gives us a list of all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;'s&lt;/code&gt; that we will use to get the total items width. We then use that to make an array of the items individual widths using a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;makeArray&lt;/code&gt; on [line 33] of the gist.&lt;/p&gt;

&lt;p&gt;Once we have got an array of each li widths, we simply add those figures together to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;itemsWidth&lt;/code&gt;. I tried to create another function for the sum, similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;makeArray&lt;/code&gt; function but it doesn’t seem to work using the code found on on &lt;a href=&quot;https://gist.github.com/alexcarpenter/f0fc3af7625b2d0fa8345b445e80de55#file-trunkdjs-a9f1f17-js-L29&quot;&gt;line 29&lt;/a&gt;. I found that if I put that logic within the constructor like on &lt;a href=&quot;https://gist.github.com/alexcarpenter/f0fc3af7625b2d0fa8345b445e80de55#file-trunkdjs-a9f1f17-js-L10&quot;&gt;line 10&lt;/a&gt; it works correctly, but I don’t think that is good practice. So I still have to figure out how to go about that.&lt;/p&gt;

&lt;h3 id=&quot;initial-commit&quot;&gt;Initial Commit&lt;/h3&gt;

&lt;p&gt;That is about as far as I got with the initial commit. It feels good to be understanding the concepts that I have started with here. I know there are probably things I could be doing better or different, so I am excited to explore those opportunities as well while I continue to work on this library. Next commit I hope to have a better way to get the items width.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://alexcarpenter.me/2016/10/17/trunkdjs-a9f1f17.html</link>
        <guid isPermaLink="true">http://alexcarpenter.me/2016/10/17/trunkdjs-a9f1f17.html</guid>
        
        
      </item>
    
      <item>
        <title>Interview: Tim Smith Designer, broadcaster, and coffee addict</title>
        <description>&lt;h3 id=&quot;hey-tim-thanks-for-taking-the-time-to-be-interviewed-can-you-please-give-us-a-short-description-about-yourself-and-what-your-day-to-day-looks-like&quot;&gt;Hey Tim thanks for taking the time to be interviewed. Can you please give us a short description about yourself and what your day to day looks like?&lt;/h3&gt;

&lt;p&gt;No, thank you! It’s an honor. Well, as you already know, my name is Tim Smith. I’m a designer and developer, among other things. I host The East Wing and I write on The Bold Report.&lt;/p&gt;

&lt;p&gt;My day to day usually starts with waking up around 8, and I have the bad habit of checking twitter and email from bed. I get up, shower, make myself coffee, feed my cat, and then get to work. Depending on the day, I’m usually doing client work for part of the day and working on a side project for the other. I have dinner around 5, and then keep working on side projects for another hour or so.&lt;/p&gt;

&lt;h3 id=&quot;you-seem-to-have-a-lot-of-side-projects-what-are-your-main-goals-with-these-flex-your-skills-learn-get-new-work-just-because-it-is-fun&quot;&gt;You seem to have a lot of side projects. What are your main goals with these, flex your skills, learn, get new work, just because it is fun?&lt;/h3&gt;

&lt;p&gt;Yes I do. I’ve cut back on some to focus a bit more and have more of a plan with what I want to accomplish. I don’t really have goals with side projects. I’m very much an emotional person, and I often trust my gut. Why do I want to do this? Will it be fun? Will I learn something new? If I have a good feeling about something, and I have the time to do it, I go ahead and do it. Some projects get traction, others don’t, but in the end, I’m proud of each of them. They’ve made me into the designer and developer that I’ve become.&lt;/p&gt;

&lt;h3 id=&quot;it-looks-like-you-started-work-as-a-designer-and-made-your-way-into-front-end-development-how-did-you-go-about-learning-front-end-code-and-any-suggestions-to-others-looking-to-make-the-same-transition&quot;&gt;It looks like you started work as a designer and made your way into front-end development. How did you go about learning front-end code and any suggestions to others looking to make the same transition?&lt;/h3&gt;

&lt;p&gt;In a way, I feel it happened by accident. I remember being in college and thinking that I needed an online portfolio. A lot of my classmates were just uploading a PDF to their site. I wanted more, so I started looking into this “HTML” thing. I was hooked. I did a lot of reading, a lot of messing around, and a lot of screencast watching. Chris Coyier’s were always my favorite. Without him, I wouldn’t be doing what I’m doing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some projects get traction, others don’t, but in the end, I’m proud of each of them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’d like to make the transition into front-end development, the best suggestion I can give you is to dive in. I know it’s a pretty generic response, but it’s actually the truth. Read documentation, watch screencasts, sign up for something like Treehouse, and most importantly, practice! Dedicate a little time every day to practice what you’re learning.&lt;/p&gt;

&lt;h3 id=&quot;what-does-your-design-to-development-workflow-look-like-these-days&quot;&gt;What does your design to development workflow look like these days?&lt;/h3&gt;

&lt;p&gt;It really depends on the project, but normally, I start with wireframes to address layout and IA, and then I jump into the browser. I try to get into the browser as soon as possible, and for the most part, I like making decisions in code.&lt;/p&gt;

&lt;p&gt;To me, Photoshop just isn’t a web design tool anymore. I can’t have a fluid canvas, I can’t use typefaces that I can on the web (although Typekit is starting to fix this for Adobe), and the type rendering continues to be horrible. I hope one day there’s a tool that allows for a fluid canvas, and gives me the freedom to drag and drop elements around the page.&lt;/p&gt;

&lt;h3 id=&quot;this-industry-is-moving-so-fast-any-suggestions-on-staying-on-top-of-it-or-knowing-when-to-not-go-down-another-rabbit-hole&quot;&gt;This industry is moving so fast, any suggestions on staying on top of it or knowing when to not go down another rabbit hole?&lt;/h3&gt;

&lt;p&gt;Oh man, that is a tough one. There is so much to learn nowadays, that I can’t imagine what it must be like for folks barely entering our industry. I think the key is to follow smart people on Twitter. These people, often help me gauge how important it is to delve into something or not. If enough people are talking about it, it’s probably time I look into it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can only become better creative professionals when we refine the other aspects of ourselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I also have this opinion that sometimes you have to drown out all the noise and just get to work. I think we often like to overcomplicate the work we do. Yes, there are tons of different variables and factors, but sometimes you’ve got to remember it’s just a website, you know? It’s extremely important to have great work ethic, but at the end of the day, is someone going to die because you used a div instead of a section element? No.&lt;/p&gt;

&lt;h3 id=&quot;any-sites-lately-that-really-inspire-you-design-or-dev-wise&quot;&gt;Any sites lately that really inspire you (design or dev wise)?&lt;/h3&gt;

&lt;p&gt;I’m in love with &lt;a href=&quot;https://the-pastry-box-project.net/&quot;&gt;The Pastry Box Project&lt;/a&gt;. Each entry feels like an appeal to become a better human. When I see writers pour their heart out like that, and ask questions that sometimes we don’t have the guts to ask our inner self, it’s truly inspiring and motivating to improve. We can only become better creative professionals when we refine the other aspects of ourselves.&lt;/p&gt;

&lt;h3 id=&quot;whats-one-of-your-big-goals-for-2014&quot;&gt;Whats one of your big goals for 2014?&lt;/h3&gt;

&lt;p&gt;I actually &lt;a href=&quot;http://theboldreport.net/2014/01/looking-forward/&quot;&gt;wrote about some of goals&lt;/a&gt;. The one I’m really looking forward to is collaborating with friends. There is nothing better than coming together with people you really like, and creating something awesome.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jan 2014 00:00:00 -0500</pubDate>
        <link>http://alexcarpenter.me/2014/01/16/interview-tim-smith-designer-broadcaster-and-coffee-addict.html</link>
        <guid isPermaLink="true">http://alexcarpenter.me/2014/01/16/interview-tim-smith-designer-broadcaster-and-coffee-addict.html</guid>
        
        
      </item>
    
      <item>
        <title>Interview: Harry Roberts of CSS Wizardry</title>
        <description>&lt;figure&gt;
  &lt;img src=&quot;/assets/img/harry-roberts.jpg&quot; alt=&quot;Harry Roberts&quot; /&gt;
  &lt;figcaption&gt;
    Harry Roberts.
    &lt;a href=&quot;http://www.flickr.com/photos/stn1978/8899790026/&quot;&gt;Photo&lt;/a&gt; by
    &lt;a href=&quot;https://twitter.com/stn1978&quot;&gt;Stefan Nitzsche&lt;/a&gt;.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;whats-the-easiest-thing-a-front-end-dev-can-start-doing-to-write-better-css&quot;&gt;Whats the easiest thing a front-end dev can start doing to write better CSS?&lt;/h3&gt;

&lt;p&gt;Start writing CSS like you’re writing it in a big team and on a big project. A lot of people treat CSS as ‘making a page look like a design’, but this short-sighted view leads to a lot of problems. Start thinking about how and where CSS fits into wider areas such performance, architecture, scalability, maintainability, team working.&lt;/p&gt;

&lt;p&gt;The biggest shift I think I made with CSS was approaching it like a software engineer might. Borrow from other schools of thought and see how that can help you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Too many developers work in their own little bubble, and that leads to poor CSS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS is easy, really easy, but it’s just as easy to mess up. I think a lot of the reasons CSS has got a bad name is because it’s not been taken or treated seriously enough. It’s an incredibly easy syntax, which is why I feel people have become more lazy with it, but we need to start thinking about the bigger picture. Instead of stopping coding once something renders properly, stop once you’ve documented, tested, refactored, and improved everything. Make sure it’s stable, robust, performant, and understandable. Too many developers work in their own little bubble, and that leads to poor CSS.&lt;/p&gt;

&lt;h3 id=&quot;seems-bem-syntax-for-naming-classes-is-catching-on-can-you-expand-upon-the-ideas-and-benefits&quot;&gt;Seems BEM syntax for naming classes is catching on. Can you expand upon the ideas and benefits?&lt;/h3&gt;

&lt;p&gt;BEM is great for a number of reasons. I guess its elevator pitch is that it’s an explicit, transparent, meaningful, and descriptive way of naming things in order to make code nicer to work with in larger teams over longer periods.&lt;/p&gt;

&lt;p&gt;BEM stands for block, element, and modifier, where a block is the top level of a discrete object, module or component; an element is a constituent part of that block; a modifier is a different variation or state of the block. Each of the three types of thing have a different syntax:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.a-block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.a-block__an-element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.a-block--a-modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A block is simply a hyphen delimited string; an element is a hyphen delimited string appended to the block, and delimited by two underscores (__); a modifier is a hyphen delimited string appended to the block, and delimited by two hyphens (–). To use an example:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.search__field&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.search--products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These example classes tell us a lot of things about themselves:&lt;/p&gt;

&lt;p&gt;What is it? Straight away we can see that this related to a search block, with a search field and a product search being involved. We can also see that the product search is a variation, or modifier, of an existing search block, and that the search field is a descendant element of the search block (we glean this from the and respectively)&lt;/p&gt;

&lt;p&gt;What it does? As a continuation of the above, we can see from the double hyphen/underscore delimiters what each of the bits of code do: one modifies and the other composes.&lt;/p&gt;

&lt;p&gt;Where it should be used. By having a namespace of sorts, we are told where and how we should use the classes. This prevents developers from using classes in areas they’re not supposed to be used in: a developer would struggle to use a .search–form class on a contact form, for example.&lt;/p&gt;

&lt;p&gt;How is it related to other things? The namespace also allows developers to see which classes are related to one another, and which ones aren’t. This becomes more obviously useful when you have a section of the DOM with many classes relating to different pieces of functionality; a namespace helps group the common classes.&lt;/p&gt;

&lt;p&gt;BEM basically gives developers a much more useful, bulletproof, and manageable way of naming things. I would strongly recommend that everyone tries it out at least once on a project.&lt;/p&gt;

&lt;h3 id=&quot;what-piece-of-work-of-yours-are-you-most-proud-of&quot;&gt;What piece of work of yours are you most proud of?&lt;/h3&gt;

&lt;p&gt;It’s really hard to say. Really hard. I don’t really get that proud, because it’s just my job, and I could probably always do it better (and I often wish I had). inuitcss is something that I am proud of on the whole—there are certain implementation details that I would like to change, but I think I’ve done a pretty good job of packaging up the OOCSS way of thinking into a framework that people seem to be using quite a lot.&lt;/p&gt;

&lt;h3 id=&quot;any-thoughts-on-suit-css-from-nicolas-gallagher&quot;&gt;Any thoughts on SUIT CSS from Nicolas Gallagher?&lt;/h3&gt;

&lt;p&gt;I love it, I want to move inuitcss to a more dependency managed codebase, and I think SUIT does that really well. I’ve always been a fan of OOCSS, and of Nicolas’ work, so SUIT is a winner in my eyes. There are things in there I would do differently, of course, but that’s an implementation-level concern.&lt;/p&gt;

&lt;h3 id=&quot;lastly-what-to-do-you-hope-to-see-in-the-near-future-from-css-community&quot;&gt;Lastly, what to do you hope to see in the near future from CSS community?&lt;/h3&gt;

&lt;p&gt;I’d really like to see people finally stop clinging to misguided notions like ‘semantic classes’ and ‘clean markup’; the web has grown up, our approach needs to grow up too.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2014 00:00:00 -0500</pubDate>
        <link>http://alexcarpenter.me/2014/01/06/interview-harry-roberts-of-css-wizardry.html</link>
        <guid isPermaLink="true">http://alexcarpenter.me/2014/01/06/interview-harry-roberts-of-css-wizardry.html</guid>
        
        
      </item>
    
  </channel>
</rss>
